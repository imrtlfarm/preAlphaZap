{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IZapper",
						"name": "_zapper",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_vault",
						"type": "address"
					},
					{
						"internalType": "contract ILBP",
						"name": "_pool",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "contract IAsset[]",
						"name": "tokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "weights",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes32",
						"name": "pid",
						"type": "bytes32"
					}
				],
				"name": "composeZapIn",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IAsset[]",
						"name": "tokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "composeZapOut",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IAsset[]",
						"name": "tokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes32",
						"name": "pid",
						"type": "bytes32"
					}
				],
				"name": "initJoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_swapEnabled",
						"type": "bool"
					}
				],
				"name": "setSwapEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "_endWeights",
						"type": "uint256[]"
					}
				],
				"name": "updateWeightsGradually",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vault",
				"outputs": [
					{
						"internalType": "contract IVault",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zapper",
				"outputs": [
					{
						"internalType": "contract IZapper",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Documents/GitHub/preAlphaZap/ZapComp.sol": "ZapComposer"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol": {
			"keccak256": "0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995",
				"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8"
			]
		},
		"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol": {
			"keccak256": "0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b",
				"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv"
			]
		},
		"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol": {
			"keccak256": "0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://c55887c89f152f00e5d65389061de28fada0e73eb5f41ebd16a3b8e65846cb1a",
				"dweb:/ipfs/QmNbVtaA44BGvKnKiCT4bEtjZu1ZD5ZJ6XrgBDh5qVEGcP"
			]
		},
		"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol": {
			"keccak256": "0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76",
			"license": "MIT",
			"urls": [
				"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a",
				"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4"
			]
		},
		"Documents/GitHub/preAlphaZap/LBPComptroller.sol": {
			"keccak256": "0xe38864b6e3f12aeb6fdfac8136cd317d985014a747d3695ab53090cdb082ffd3",
			"urls": [
				"bzz-raw://1e48c56a7ccc5a917c3f2de3c067b25e0103a17ab2cc1be3452136101c1ef7d0",
				"dweb:/ipfs/QmTW3FiFHNySeomyUXxBRn65o2eUuAJj6cnWZZVybSmieD"
			]
		},
		"Documents/GitHub/preAlphaZap/ZapComp.sol": {
			"keccak256": "0xf147825f0a93034950b075ed0be0c1bdf50f96c60181ead692b64ff650775199",
			"urls": [
				"bzz-raw://8df688142b8538998113a53abcb4907c1af8244c7c5557a1a12d35a83e5e85b8",
				"dweb:/ipfs/QmQVM8WfUFzhxwXAibqYXPVZt5DuHC3aeyyb9L9ZuJE7jh"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/318c4b44eaba2d745ed4a6381c43e03edc53634d/contracts/access/Ownable.sol": {
			"keccak256": "0x08f0cb43b10dd6652a0563d7b2a4e7bb82e93f877458cd903f1f6d5819ba1252",
			"license": "MIT",
			"urls": [
				"bzz-raw://43ba672ba129548493f0f83547e0c4e6ffd52c0929f10c7a62475abb0a2098ff",
				"dweb:/ipfs/QmbMvf8bavgTRc93bsG3vfxXZ31NSxdp6aSmgJq6nELqC1"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/318c4b44eaba2d745ed4a6381c43e03edc53634d/contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"https://github.com/beethovenxfi/balancer-v2-monorepo/blob/master/pkg/vault/contracts/interfaces/IAsset.sol": {
			"keccak256": "0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1",
				"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn"
			]
		},
		"https://github.com/beethovenxfi/balancer-v2-monorepo/blob/master/pkg/vault/contracts/interfaces/IAuthorizer.sol": {
			"keccak256": "0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0",
				"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m"
			]
		},
		"https://github.com/beethovenxfi/balancer-v2-monorepo/blob/master/pkg/vault/contracts/interfaces/IFlashLoanRecipient.sol": {
			"keccak256": "0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://35a6ee6cb389f2675c1b64f9813862d3503524ee05067ba88172c9298d4f5e3c",
				"dweb:/ipfs/QmZGPUaoKfRigdo2U9U3695j9wX97GRSzgiK8c6zhVjjFY"
			]
		},
		"https://github.com/beethovenxfi/balancer-v2-monorepo/blob/master/pkg/vault/contracts/interfaces/IProtocolFeesCollector.sol": {
			"keccak256": "0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://b8a27ce7efd29cb653529a2e2c6a828f5bd973b286dc166d12a8f81426bca68a",
				"dweb:/ipfs/QmPFuddzXwjK58qDG4z1n9S9Yff865yCToAStRbdfWMo1D"
			]
		},
		"https://github.com/beethovenxfi/balancer-v2-monorepo/blob/master/pkg/vault/contracts/interfaces/IVault.sol": {
			"keccak256": "0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://e428d19d1bd18504c5c8a797b0a80515072f4d7fc278df73b9fec0ab8efe155d",
				"dweb:/ipfs/QmYeJPPQKAckBVvuhU9XXiZR4aSrVNu3WcfTmSsXJJYey3"
			]
		}
	},
	"version": 1
}